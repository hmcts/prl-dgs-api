import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.65'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '6.1.0.5360'
    id 'org.springframework.boot' version '2.7.18'
    id 'au.com.dius.pact' version '4.6.17'
}

application {
    group = 'uk.gov.hmcts.reform.prl'
    mainClass = 'uk.gov.hmcts.reform.prl.documentgenerator.DocumentGeneratorApplication'
    version = '0.0.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/integrationTest/java']
        }
        resources {
            srcDirs = ['src/integrationTest/resources']
        }
    }
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDirs = ['src/functionalTest/java']
    }
    resources {
      srcDirs = ['src/functionalTest/resources']
    }
  }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntime.extendsFrom testRuntime
    smokeTestImplementation.extendsFrom testImplementation
    smokeTestRuntime.extendsFrom testRuntime
}

bootJar {
  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
  archiveFileName = 'prl-dgs-api.jar'
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

jacoco {
  toolVersion = "0.8.8"
}

def versions = [
    commonsIo: '2.7',
    commonsLang3: '3.9',
    commonsBeanUtils: '1.9.4',
    feignHttpClient: '10.2.0',
    gradlePitest: '1.4.5',
    guava: '32.1.2-jre',
    jacksonDatabind: '2.16.0',
    apacheLogging: '2.20.0',
    jsonAssert: '1.2.3',
    junit: '4.13.1',
    lombok: '1.18.26',
    nimbus: '5.1',
    pdfbox: '2.0.24',
    pitest: '1.7.3',
    powerMock: '2.0.0',
    reformsJavaLogging: '5.1.1',
    restAssured: '4.5.1',
    serenity: '2.2.13',
    serenityCucumber: '1.9.51',
    serviceTokenGenerator: '3.0.0',
    sonarPitest: '0.5',
    spring_security_rsa: '1.0.12.RELEASE',
    springBoot: '2.7.18',
    springCloud: '3.1.6',
    springHateoas: '1.5.5',
    unirest: '1.4.9',
    wiremockVersion: '2.27.2',
    springSecurityCrypto: '5.7.11',
    tomcat   : '9.0.83',
    pact_version: '4.1.11',
    httpComponents: '4.5.13',
    bouncycastle: '1.73',
    ccdCaseDocumentAmClient: '1.7.2',
    springFramework    : '5.3.27'
]

ext["logback.version"] = '1.2.13'
ext['snakeyaml.version'] = '2.2'
ext['jackson.version'] = '2.16.0'
ext['spring-framework.version'] = '5.3.27'




dependencies {
  // integration test
  integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
  integrationTestImplementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: versions.nimbus
  integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
  integrationTestImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox
  integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: versions.jsonAssert
  integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

  integrationTestImplementation (group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator){
    exclude group: 'io.reactivex', module: 'io.reactivex'
    exclude group: 'io.reactivex', module: 'rxnetty'
    exclude group: 'io.reactivex', module: 'rxnetty-contexts'
    exclude group: 'io.reactivex', module: 'rxnetty-servo'
  }

  functionalTestImplementation (group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator){
    exclude group: 'io.reactivex', module: 'io.reactivex'
    exclude group: 'io.reactivex', module: 'rxnetty'
    exclude group: 'io.reactivex', module: 'rxnetty-contexts'
    exclude group: 'io.reactivex', module: 'rxnetty-servo'
  }

  functionalTestImplementation group: 'com.github.hmcts', name:'ccd-case-document-am-client', version: versions.ccdCaseDocumentAmClient

  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.1'

  implementation (group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils)
  implementation (group:  'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
    exclude group: 'org.springframework.security', module: 'spring-security-crypto'
  }

  implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: versions.bouncycastle

  implementation group: 'com.github.hmcts', name:'ccd-case-document-am-client', version: versions.ccdCaseDocumentAmClient

  implementation(group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.apacheLogging)
  implementation(group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.apacheLogging)

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.9'

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: '2.2.10.RELEASE'
  implementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign',  version: versions.springCloud) {
    exclude group: 'io.reactivex', module: 'io.reactivex'
    exclude group: 'io.reactivex', module: 'rxnetty'
    exclude group: 'io.reactivex', module: 'rxnetty-contexts'
    exclude group: 'io.reactivex', module: 'rxnetty-servo'
    exclude group: 'org.bouncycastle'
  }

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
  implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: versions.springHateoas
  implementation group: 'org.apache.commons', name: 'commons-lang3', version : versions.commonsLang3

  implementation 'com.github.hmcts.java-logging:logging:6.1.6'
  implementation 'com.github.hmcts.java-logging:logging-appinsights:6.1.6'
  implementation group: 'org.springframework', name: 'spring-context-support', version: versions.springFramework
  implementation ( group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator) {
    exclude group: 'io.reactivex', module: 'io.reactivex'
    exclude group: 'io.reactivex', module: 'rxnetty'
    exclude group: 'io.reactivex', module: 'rxnetty-contexts'
    exclude group: 'io.reactivex', module: 'rxnetty-servo'
    exclude group: 'org.bouncycastle'
  }

  implementation group: 'junit', name: 'junit', version: versions.junit
  implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  implementation group:'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  implementation group:'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
  implementation (group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.4.0')
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version:'7.4'

  annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation("org.springframework.boot:spring-boot-starter-validation")
  testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude(module: 'commons-logging')
  }
  testImplementation('org.springframework.security:spring-security-test')
  runtimeOnly('org.springframework.boot:spring-boot-devtools')

  runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

  contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.9.2")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.10.2')

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  testImplementation 'com.github.hmcts:fortify-client:1.2.2:all'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}
processContractTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


dependencyManagement {
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

        dependencySet(
            group: 'com.fasterxml.jackson.core',
            version: versions.jacksonDatabind
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }

        dependency group: 'com.netflix.servo',name: 'servo-core', version: '0.13.2'

        // CVE-2021-30640, CVE-2021-33037
        dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-websocket'
            entry 'tomcat-embed-el'
        }

        // CVE-2021-28170
        dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

      //CVE-2022-45688
      dependencySet(group: 'org.json', version: '20230227') {
        entry 'json'
      }
      //CVE-2023-2976
      dependency group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'

      //CVE-2022-1471
      dependencySet(group: 'org.yaml', version: '2.2') {
        entry 'snakeyaml'
      }
      dependency group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.7.5'


    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }

  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/functionalTest/java')
    }
    resources {
      srcDir('src/functionalTest/resources')
    }
  }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
  smokeTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

dependencies {
    integrationTestImplementation(sourceSets.test.output)
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestImplementation(sourceSets.test.output)
    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

tasks.withType(Test) {
  useJUnitPlatform()
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
  setClasspath(sourceSets.smokeTest.runtimeClasspath)
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
  mainClass = 'uk.gov.hmcts.reform.prl.documentgenerator.DocumentGeneratorApplication'
  doFirst() {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = System.properties
    systemProperty 'spring.profiles.active', 'aat'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)

    finalizedBy aggregate
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
  setClasspath(sourceSets.integrationTest.runtimeClasspath)

  finalizedBy aggregate
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
}


task printVersion {
    doLast {
        print project.version
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.prl.documentgenerator.*']
    excludedClasses = ['uk.gov.hmcts.reform.prl.documentgenerator.config.*',
                       'uk.gov.hmcts.reform.prl.documentgenerator.domain.*',
                       'uk.gov.hmcts.reform.prl.documentgenerator.exception.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
    mutationThreshold = 80
}

task developAddRelaseSuffix() {
  version = "${version}-SNAPSHOT"
}

jacocoTestReport {
  executionData(test)

  reports {
    xml.getRequired().set(true)
    html.getRequired().set(true)
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
    '**uk/gov/hmcts/reform/prl/documentgenerator/domain/**/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/exception/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/**/config/**/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/DocumentGeneratorApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectName", "Family Private Law :: prl-dgs"
        property "sonar.projectKey", "prl-dgs-api"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}
