import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.65'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '6.1.0.5360'
    id 'org.springframework.boot' version '2.7.18'
    id 'au.com.dius.pact' version '4.6.17'
}

application {
    group = 'uk.gov.hmcts.reform.prl'
    mainClass = 'uk.gov.hmcts.reform.prl.documentgenerator.DocumentGeneratorApplication'
    version = '0.0.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

def configureSourceSet(String name) {
    sourceSets.create(name) { sourceSet ->
        sourceSet.java {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
            srcDir "src/${name}/java"
        }
        sourceSet.resources.srcDir "src/${name}/resources"
    }
}

['smokeTest', 'integrationTest', 'functionalTest', 'contractTest'].each { configureSourceSet(it) }

configurations {
    smokeTestImplementation.extendsFrom testImplementation
    smokeTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntime.extendsFrom testRuntime
}

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
    archiveFileName = 'prl-dgs-api.jar'
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

def versions = [
    apacheLogging: '2.20.0',
    ccdCaseDocumentAmClient: '1.7.2',
    httpComponents: '4.5.13',
    junit5: '5.9.0',
    lombok: '1.18.36',
    pact_version: '4.1.11',
    restAssured: '5.5.1',
    serviceTokenGenerator: '3.0.0',
    springBoot: '2.7.18',
]

dependencies {
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-devtools'
    runtimeOnly group: 'org.springframework.boot', name: 'spring-boot-properties-migrator'

    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.0.12.RELEASE'
    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.7.11'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.73'
    implementation group: 'com.github.hmcts', name:'ccd-case-document-am-client', version: versions.ccdCaseDocumentAmClient
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.apacheLogging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.apacheLogging
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.9'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: '2.2.10.RELEASE'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign',    version: '3.1.6'
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '10.2.0'
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '1.5.5'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.6'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: '6.1.6'
    implementation group: 'org.springframework', name: 'spring-context-support', version: '5.3.27'
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'com.google.guava', name: 'guava', version: '33.4.6-jre'
    implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.4.0'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version:'7.4'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5

    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.1'
    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: '2.27.2'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.8', classifier: 'all'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit5
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath

    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit5

    contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit5
    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    functionalTestImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator
    functionalTestImplementation group: 'com.github.hmcts', name:'ccd-case-document-am-client', version: versions.ccdCaseDocumentAmClient
    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath
    functionalTestImplementation sourceSets.test.output

    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    integrationTestImplementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '5.1'
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    integrationTestImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.24'
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: '1.2.3'
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    integrationTestImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceTokenGenerator
    integrationTestImplementation sourceSets.test.output
}

tasks.register('fortifyScan', JavaExec) {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

processContractTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processFunctionalTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.register('smoke', Test) {
    description = 'Runs the smoke tests.'
    group = 'Verification'
    setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
    setClasspath(sourceSets.smokeTest.runtimeClasspath)
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    mainClass = 'uk.gov.hmcts.reform.prl.documentgenerator.DocumentGeneratorApplication'
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
    }
}

tasks.register('functional', Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)
}

tasks.register('integration', Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

tasks.register('contract', Test) {
    description = 'Runs the contract tests.'
    group = 'Delivery pipeline'
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
}

jacoco {
  toolVersion = "0.8.12"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
        xml.outputLocation = file("${layout.buildDirectory.get()}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
    '**uk/gov/hmcts/reform/prl/documentgenerator/domain/**/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/exception/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/**/config/**/*',
    '**uk/gov/hmcts/reform/prl/documentgenerator/DocumentGeneratorApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectName", "Family Private Law :: prl-dgs"
        property "sonar.projectKey", "prl-dgs-api"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get()}"
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

tasks.register('runAndPublishConsumerPactTests', Test) {
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}

runAndPublishConsumerPactTests.dependsOn contract
runAndPublishConsumerPactTests.finalizedBy pactPublish
