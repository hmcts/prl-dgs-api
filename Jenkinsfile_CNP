#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

properties([
    [
        $class       : 'GithubProjectProperty',
        displayName  : 'Family Private Law Document Generator Client',
        projectUrlStr: 'https://github.com/hmcts/prl-dgs-api'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "prl"
def component = "dgs"
def channel = '#prl-tech-notifications'

def secrets = [
    'prl-${env}': [
        secret("microservicekey-prl-dgs-api", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
        secret("docmosis-api-key", "DOCMOSIS_SERVICE_ACCESS_KEY"),
        secret("launchDarkly-sdk-key", "LAUNCH_DARKLY_SDK_KEY"),
        secret("AppInsightsInstrumentationKey", "APP_INSIGHTS_INSTRUMENTATION_KEY")
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, component) {
    pipelineConf = config;
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    enableSlackNotifications(channel)
    disableLegacyDeployment()

    after('checkout') {
        echo '${product}-${component} checked out'
    }

    before('smoketest:aat') {
        echo 'Smoketest is starting'
        env.test_environment = 'aat'
    }

    after('smoketest:aat') {
        steps.junit '**/test-results/**/*.xml'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
        echo 'Smoketest is done'
    }

    before('functionalTest:aat') {
        env.test_environment = 'aat'
    }

    before('smoketest:preview') {
        echo 'Smoketest is starting'
        env.test_environment = 'aat'
    }

    after('smoketest:preview') {
        steps.junit '**/test-results/**/*.xml'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
        echo 'Smoketest is done'
    }

    // Kubernetes does not retrieve variables from the output terraform
    before('functionalTest:preview') {
        env.FEATURE_RESP_SOLICITOR_DETAILS = 'true'
        env.test_environment = 'aat'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    onMaster() {
      env.ENV = 'aat'
      enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }

    onPR() {
      env.ENV = 'preview'
      // enableCleanupOfHelmReleaseOnSuccess()
      enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }
}
