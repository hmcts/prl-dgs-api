#!groovy

properties([
        pipelineTriggers([cron('0 23 * * *')]),
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: 'https://prl-dgs-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
            string(name: 'SecurityRules',
              defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
              description: 'The URL you want to run these tests against')
        ])
    ])

@Library("Infrastructure")

def type = "java"
def product = "prl"
def component = "dgs"

def channel = '#prl-tech-notifications'

def secrets = [
  'prl-${env}': [
    secret("microservicekey-prl-dgs-api", "AUTH_PROVIDER_SERVICE_CLIENT_KEY"),
    secret("docmosis-api-key", "DOCMOSIS_SERVICE_ACCESS_KEY")
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {
  env.TEST_URL = params.URL_TO_TEST
  env.test_environment = 'aat'

  loadVaultSecrets(secrets)
  enableSlackNotifications(channel)
  //enableFortifyScan()
  enableFullFunctionalTest(200)
  //enableMutationTest()

  after('fullFunctionalTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  after('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }
}
